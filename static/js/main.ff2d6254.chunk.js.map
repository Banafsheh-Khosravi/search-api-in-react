{"version":3,"sources":["components/Search.js","components/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Search","state","searchText","getSearch","e","setState","target","value","handleSubmit","preventDefault","props","onSearch","query","currentTarget","reset","onSubmit","this","type","onChange","name","ref","input","placeholder","className","Button","variant","id","Component","Recipe","title","calories","image","ingredients","map","ingredient","text","src","alt","APP_ID","APP_KEY","App","performSearch","fetch","then","response","json","data","recipes","hits","loading","recipe","key","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6SAuCeA,G,iNAnCbC,MAAQ,CACNC,WAAY,I,EAGdC,UAAY,SAAAC,GACV,EAAKC,SAAS,CACZH,WAAYE,EAAEE,OAAOC,S,EAIzBC,aAAe,SAAAJ,GACbA,EAAEK,iBACF,EAAKC,MAAMC,SAAS,EAAKC,MAAML,OAC/BH,EAAES,cAAcC,S,wEAGR,IAAD,OACP,OACE,0BAAMC,SAAUC,KAAKR,cACnB,2BACES,KAAK,SACLC,SAAUF,KAAKb,UACfgB,KAAK,SACLC,IAAK,SAAAC,GAAK,OAAK,EAAKT,MAAQS,GAC5BC,YAAY,YACZC,UAAU,WAEZ,kBAACC,EAAA,EAAD,CAAQD,UAAU,SAASE,QAAQ,UAAUR,KAAK,SAASS,GAAG,UAA9D,e,GA5BaC,cCiBNC,EAjBA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxC,OACE,yBAAKT,UAAU,WACb,4BAAKM,GACL,4BACGG,EAAYC,KAAI,SAAAC,GAAU,OACzB,4BAAKA,EAAWC,UAGpB,2BACE,sCADF,IACkBL,GAElB,yBAAKM,IAAKL,EAAOM,IAAI,OCVrBC,G,MAAS,YACTC,EAAU,mCAiDDC,E,YA9Cb,aAAe,IAAD,8BACZ,+CAWFC,cAAgB,WAAqB,IAApB7B,EAAmB,uDAAX,OACvB8B,MAAM,mCAAD,OACgC9B,EADhC,mBACgD0B,EADhD,oBACkEC,IAEpEI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKzC,SAAS,CACZ0C,QAASD,EAAKE,KACdC,SAAS,QAlBf,EAAKhD,MAAQ,CACX8C,QAAS,GACTE,SAAS,GAJC,E,iFASZjC,KAAKyB,kB,+BAgBG,IACAM,EAAY/B,KAAKf,MAAjB8C,QACR,OACE,yBAAKxB,UAAU,aACb,kBAAC,EAAD,CAAQZ,SAAUK,KAAKyB,gBACvB,6BACGM,EAAQd,KAAI,SAAAiB,GAAM,OACjB,kBAAC,EAAD,CACEC,IAAKD,EAAOA,OACZrB,MAAOqB,EAAOA,OAAOE,MACrBtB,SAAUoB,EAAOA,OAAOpB,SACxBC,MAAOmB,EAAOA,OAAOnB,MACrBC,YAAakB,EAAOA,OAAOlB,uB,GAtCvBL,aCIE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.ff2d6254.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport \"./style.css\";\nclass Search extends Component {\n  state = {\n    searchText: \"\"\n  };\n\n  getSearch = e => {\n    this.setState({\n      searchText: e.target.value\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSearch(this.query.value);\n    e.currentTarget.reset();\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\"search\"\n          onChange={this.getSearch}\n          name=\"search\"\n          ref={input => (this.query = input)}\n          placeholder=\"Recipe...\"\n          className=\"search\"\n        />\n        <Button className=\"button\" variant=\"warning\" type=\"submit\" id=\"submit\">\n          Search\n        </Button>\n      </form>\n    );\n  }\n}\n\nexport default Search;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Recipe = ({ title, calories, image, ingredients }) => {\n  return (\n    <div className=\"content\">\n      <h1>{title}</h1>\n      <ol>\n        {ingredients.map(ingredient => (\n          <li>{ingredient.text}</li>\n        ))}\n      </ol>\n      <p>\n        <b>Colory:</b> {calories}\n      </p>\n      <img src={image} alt=\"\" />\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React, { Component } from \"react\";\nimport Search from \"./components/Search\";\nimport Recipe from \"./components/Recipe\";\nimport \"./App.css\";\n\nconst APP_ID = \"2bfe6d34\";\nconst APP_KEY = \"97eb0e2b8c9386521819289cf74b98bc\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      recipes: [],\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    this.performSearch();\n  }\n\n  performSearch = (query = \"food\") => {\n    fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    )\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          recipes: data.hits,\n          loading: false\n        });\n      });\n  };\n\n  render() {\n    const { recipes } = this.state;\n    return (\n      <div className=\"container\">\n        <Search onSearch={this.performSearch} />\n        <div>\n          {recipes.map(recipe => (\n            <Recipe\n              key={recipe.recipe}\n              title={recipe.recipe.label}\n              calories={recipe.recipe.calories}\n              image={recipe.recipe.image}\n              ingredients={recipe.recipe.ingredients}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}